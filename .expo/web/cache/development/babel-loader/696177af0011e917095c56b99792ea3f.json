{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport ReactNativeViewViewConfig from \"../../Components/View/ReactNativeViewViewConfig\";\nvar RCTSinglelineTextInputViewConfig = {\n  uiViewClassName: 'RCTSinglelineTextInputView',\n  bubblingEventTypes: {\n    topBlur: {\n      phasedRegistrationNames: {\n        bubbled: 'onBlur',\n        captured: 'onBlurCapture'\n      }\n    },\n    topChange: {\n      phasedRegistrationNames: {\n        bubbled: 'onChange',\n        captured: 'onChangeCapture'\n      }\n    },\n    topEndEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onEndEditing',\n        captured: 'onEndEditingCapture'\n      }\n    },\n    topFocus: {\n      phasedRegistrationNames: {\n        bubbled: 'onFocus',\n        captured: 'onFocusCapture'\n      }\n    },\n    topKeyPress: {\n      phasedRegistrationNames: {\n        bubbled: 'onKeyPress',\n        captured: 'onKeyPressCapture'\n      }\n    },\n    topSubmitEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onSubmitEditing',\n        captured: 'onSubmitEditingCapture'\n      }\n    },\n    topTouchCancel: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchCancel',\n        captured: 'onTouchCancelCapture'\n      }\n    },\n    topTouchEnd: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchEnd',\n        captured: 'onTouchEndCapture'\n      }\n    },\n    topTouchMove: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchMove',\n        captured: 'onTouchMoveCapture'\n      }\n    }\n  },\n  directEventTypes: {},\n  validAttributes: _objectSpread(_objectSpread({}, ReactNativeViewViewConfig.validAttributes), {}, {\n    fontSize: true,\n    fontWeight: true,\n    fontVariant: true,\n    textShadowOffset: {\n      diff: require(\"../../Utilities/differ/sizesDiffer\")\n    },\n    allowFontScaling: true,\n    fontStyle: true,\n    textTransform: true,\n    textAlign: true,\n    fontFamily: true,\n    lineHeight: true,\n    isHighlighted: true,\n    writingDirection: true,\n    textDecorationLine: true,\n    textShadowRadius: true,\n    letterSpacing: true,\n    textDecorationStyle: true,\n    textDecorationColor: {\n      process: require(\"../../StyleSheet/processColor\")\n    },\n    color: {\n      process: require(\"../../StyleSheet/processColor\")\n    },\n    maxFontSizeMultiplier: true,\n    textShadowColor: {\n      process: require(\"../../StyleSheet/processColor\")\n    },\n    editable: true,\n    inputAccessoryViewID: true,\n    caretHidden: true,\n    enablesReturnKeyAutomatically: true,\n    placeholderTextColor: {\n      process: require(\"../../StyleSheet/processColor\")\n    },\n    onSelectionChange: true,\n    clearButtonMode: true,\n    onContentSizeChange: true,\n    keyboardType: true,\n    selection: true,\n    returnKeyType: true,\n    blurOnSubmit: true,\n    mostRecentEventCount: true,\n    onChange: true,\n    scrollEnabled: true,\n    selectionColor: {\n      process: require(\"../../StyleSheet/processColor\")\n    },\n    contextMenuHidden: true,\n    secureTextEntry: true,\n    onTextInput: true,\n    placeholder: true,\n    autoCorrect: true,\n    onScroll: true,\n    multiline: true,\n    textContentType: true,\n    maxLength: true,\n    autoCapitalize: true,\n    keyboardAppearance: true,\n    passwordRules: true,\n    spellCheck: true,\n    selectTextOnFocus: true,\n    text: true,\n    clearTextOnFocus: true\n  })\n};\nmodule.exports = RCTSinglelineTextInputViewConfig;","map":{"version":3,"names":["ReactNativeViewViewConfig","RCTSinglelineTextInputViewConfig","uiViewClassName","bubblingEventTypes","topBlur","phasedRegistrationNames","bubbled","captured","topChange","topEndEditing","topFocus","topKeyPress","topSubmitEditing","topTouchCancel","topTouchEnd","topTouchMove","directEventTypes","validAttributes","fontSize","fontWeight","fontVariant","textShadowOffset","diff","require","allowFontScaling","fontStyle","textTransform","textAlign","fontFamily","lineHeight","isHighlighted","writingDirection","textDecorationLine","textShadowRadius","letterSpacing","textDecorationStyle","textDecorationColor","process","color","maxFontSizeMultiplier","textShadowColor","editable","inputAccessoryViewID","caretHidden","enablesReturnKeyAutomatically","placeholderTextColor","onSelectionChange","clearButtonMode","onContentSizeChange","keyboardType","selection","returnKeyType","blurOnSubmit","mostRecentEventCount","onChange","scrollEnabled","selectionColor","contextMenuHidden","secureTextEntry","onTextInput","placeholder","autoCorrect","onScroll","multiline","textContentType","maxLength","autoCapitalize","keyboardAppearance","passwordRules","spellCheck","selectTextOnFocus","text","clearTextOnFocus","module","exports"],"sources":["D:/Youcode/Projet/Full Stcuk JavaScript/ZELIVERY/node_modules/react-native/Libraries/Components/TextInput/RCTSinglelineTextInputViewConfig.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport ReactNativeViewViewConfig from '../../Components/View/ReactNativeViewViewConfig';\nimport type {ReactNativeBaseComponentViewConfig} from '../../Renderer/shims/ReactNativeTypes';\n\nconst RCTSinglelineTextInputViewConfig = {\n  uiViewClassName: 'RCTSinglelineTextInputView',\n  bubblingEventTypes: {\n    topBlur: {\n      phasedRegistrationNames: {\n        bubbled: 'onBlur',\n        captured: 'onBlurCapture',\n      },\n    },\n    topChange: {\n      phasedRegistrationNames: {\n        bubbled: 'onChange',\n        captured: 'onChangeCapture',\n      },\n    },\n    topEndEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onEndEditing',\n        captured: 'onEndEditingCapture',\n      },\n    },\n    topFocus: {\n      phasedRegistrationNames: {\n        bubbled: 'onFocus',\n        captured: 'onFocusCapture',\n      },\n    },\n    topKeyPress: {\n      phasedRegistrationNames: {\n        bubbled: 'onKeyPress',\n        captured: 'onKeyPressCapture',\n      },\n    },\n    topSubmitEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onSubmitEditing',\n        captured: 'onSubmitEditingCapture',\n      },\n    },\n    topTouchCancel: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchCancel',\n        captured: 'onTouchCancelCapture',\n      },\n    },\n    topTouchEnd: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchEnd',\n        captured: 'onTouchEndCapture',\n      },\n    },\n\n    topTouchMove: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchMove',\n        captured: 'onTouchMoveCapture',\n      },\n    },\n  },\n  directEventTypes: {},\n  validAttributes: {\n    ...ReactNativeViewViewConfig.validAttributes,\n    fontSize: true,\n    fontWeight: true,\n    fontVariant: true,\n    // flowlint-next-line untyped-import:off\n    textShadowOffset: {diff: require('../../Utilities/differ/sizesDiffer')},\n    allowFontScaling: true,\n    fontStyle: true,\n    textTransform: true,\n    textAlign: true,\n    fontFamily: true,\n    lineHeight: true,\n    isHighlighted: true,\n    writingDirection: true,\n    textDecorationLine: true,\n    textShadowRadius: true,\n    letterSpacing: true,\n    textDecorationStyle: true,\n    textDecorationColor: {process: require('../../StyleSheet/processColor')},\n    color: {process: require('../../StyleSheet/processColor')},\n    maxFontSizeMultiplier: true,\n    textShadowColor: {process: require('../../StyleSheet/processColor')},\n    editable: true,\n    inputAccessoryViewID: true,\n    caretHidden: true,\n    enablesReturnKeyAutomatically: true,\n    placeholderTextColor: {process: require('../../StyleSheet/processColor')},\n    onSelectionChange: true,\n    clearButtonMode: true,\n    onContentSizeChange: true,\n    keyboardType: true,\n    selection: true,\n    returnKeyType: true,\n    blurOnSubmit: true,\n    mostRecentEventCount: true,\n    onChange: true,\n    scrollEnabled: true,\n    selectionColor: {process: require('../../StyleSheet/processColor')},\n    contextMenuHidden: true,\n    secureTextEntry: true,\n    onTextInput: true,\n    placeholder: true,\n    autoCorrect: true,\n    onScroll: true,\n    multiline: true,\n    textContentType: true,\n    maxLength: true,\n    autoCapitalize: true,\n    keyboardAppearance: true,\n    passwordRules: true,\n    spellCheck: true,\n    selectTextOnFocus: true,\n    text: true,\n    clearTextOnFocus: true,\n  },\n};\n\nmodule.exports = (RCTSinglelineTextInputViewConfig: ReactNativeBaseComponentViewConfig<>);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
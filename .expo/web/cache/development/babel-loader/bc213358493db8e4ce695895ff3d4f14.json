{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport NativeEventEmitter from \"../EventEmitter/NativeEventEmitter\";\nimport logError from \"../Utilities/logError\";\nimport EventEmitter from \"../vendor/emitter/EventEmitter\";\nimport NativeAppState from \"./NativeAppState\";\nimport invariant from 'invariant';\n\nvar AppState = function (_NativeEventEmitter) {\n  _inherits(AppState, _NativeEventEmitter);\n\n  var _super = _createSuper(AppState);\n\n  function AppState() {\n    var _this;\n\n    _classCallCheck(this, AppState);\n\n    _this = _super.call(this, NativeAppState);\n    _this._supportedEvents = ['change', 'memoryWarning', 'blur', 'focus'];\n    _this.isAvailable = true;\n    _this._eventHandlers = _this._supportedEvents.reduce(function (handlers, key) {\n      handlers[key] = new Map();\n      return handlers;\n    }, {});\n    _this.currentState = NativeAppState.getConstants().initialAppState;\n    var eventUpdated = false;\n\n    _this.addListener('appStateDidChange', function (appStateData) {\n      eventUpdated = true;\n      _this.currentState = appStateData.app_state;\n    });\n\n    NativeAppState.getCurrentAppState(function (appStateData) {\n      if (!eventUpdated && _this.currentState !== appStateData.app_state) {\n        _this.currentState = appStateData.app_state;\n\n        _this.emit('appStateDidChange', appStateData);\n      }\n    }, logError);\n    return _this;\n  }\n\n  _createClass(AppState, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      invariant(this._supportedEvents.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      switch (type) {\n        case 'change':\n          {\n            this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {\n              handler(appStateData.app_state);\n            }));\n\n            break;\n          }\n\n        case 'memoryWarning':\n          {\n            this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));\n\n            break;\n          }\n\n        case 'blur':\n        case 'focus':\n          {\n            this._eventHandlers[type].set(handler, this.addListener('appStateFocusChange', function (hasFocus) {\n              if (type === 'blur' && !hasFocus) {\n                handler();\n              }\n\n              if (type === 'focus' && hasFocus) {\n                handler();\n              }\n            }));\n          }\n      }\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      invariant(this._supportedEvents.indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n\n      if (!this._eventHandlers[type].has(handler)) {\n        return;\n      }\n\n      this._eventHandlers[type].get(handler).remove();\n\n      this._eventHandlers[type].delete(handler);\n    }\n  }]);\n\n  return AppState;\n}(NativeEventEmitter);\n\nfunction throwMissingNativeModule() {\n  invariant(false, 'Cannot use AppState module when native RCTAppState is not included in the build.\\n' + 'Either include it, or check AppState.isAvailable before calling any methods.');\n}\n\nvar MissingNativeAppStateShim = function (_EventEmitter) {\n  _inherits(MissingNativeAppStateShim, _EventEmitter);\n\n  var _super2 = _createSuper(MissingNativeAppStateShim);\n\n  function MissingNativeAppStateShim() {\n    var _this2;\n\n    _classCallCheck(this, MissingNativeAppStateShim);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _super2.call.apply(_super2, [this].concat(args));\n    _this2.isAvailable = false;\n    _this2.currentState = null;\n    return _this2;\n  }\n\n  _createClass(MissingNativeAppStateShim, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      throwMissingNativeModule();\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      throwMissingNativeModule();\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener() {\n      throwMissingNativeModule();\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      throwMissingNativeModule();\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription() {\n      throwMissingNativeModule();\n    }\n  }]);\n\n  return MissingNativeAppStateShim;\n}(EventEmitter);\n\nvar AppStateInstance = NativeAppState ? new AppState() : new MissingNativeAppStateShim();\nmodule.exports = AppStateInstance;","map":{"version":3,"names":["NativeEventEmitter","logError","EventEmitter","NativeAppState","invariant","AppState","_supportedEvents","isAvailable","_eventHandlers","reduce","handlers","key","Map","currentState","getConstants","initialAppState","eventUpdated","addListener","appStateData","app_state","getCurrentAppState","emit","type","handler","indexOf","set","hasFocus","has","get","remove","delete","throwMissingNativeModule","MissingNativeAppStateShim","AppStateInstance","module","exports"],"sources":["D:/Youcode/Projet/Full Stcuk JavaScript/ZELIVERY/node_modules/react-native/Libraries/AppState/AppState.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport logError from '../Utilities/logError';\nimport EventEmitter from '../vendor/emitter/EventEmitter';\nimport NativeAppState from './NativeAppState';\nimport invariant from 'invariant';\n\n/**\n * `AppState` can tell you if the app is in the foreground or background,\n * and notify you when the state changes.\n *\n * See https://reactnative.dev/docs/appstate.html\n */\nclass AppState extends NativeEventEmitter {\n  _eventHandlers: Object;\n  _supportedEvents = ['change', 'memoryWarning', 'blur', 'focus'];\n  currentState: ?string;\n  isAvailable: boolean;\n\n  constructor() {\n    super(NativeAppState);\n\n    this.isAvailable = true;\n    this._eventHandlers = this._supportedEvents.reduce((handlers, key) => {\n      handlers[key] = new Map();\n      return handlers;\n    }, {});\n\n    this.currentState = NativeAppState.getConstants().initialAppState;\n\n    let eventUpdated = false;\n\n    // TODO: this is a terrible solution - in order to ensure `currentState`\n    // prop is up to date, we have to register an observer that updates it\n    // whenever the state changes, even if nobody cares. We should just\n    // deprecate the `currentState` property and get rid of this.\n    this.addListener('appStateDidChange', appStateData => {\n      eventUpdated = true;\n      this.currentState = appStateData.app_state;\n    });\n\n    // TODO: see above - this request just populates the value of `currentState`\n    // when the module is first initialized. Would be better to get rid of the\n    // prop and expose `getCurrentAppState` method directly.\n    NativeAppState.getCurrentAppState(appStateData => {\n      // It's possible that the state will have changed here & listeners need to be notified\n      if (!eventUpdated && this.currentState !== appStateData.app_state) {\n        this.currentState = appStateData.app_state;\n        this.emit('appStateDidChange', appStateData);\n      }\n    }, logError);\n  }\n\n  // TODO: now that AppState is a subclass of NativeEventEmitter, we could\n  // deprecate `addEventListener` and `removeEventListener` and just use\n  // addListener` and `listener.remove()` directly. That will be a breaking\n  // change though, as both the method and event names are different\n  // (addListener events are currently required to be globally unique).\n  /**\n   * Add a handler to AppState changes by listening to the `change` event type\n   * and providing the handler.\n   *\n   * See https://reactnative.dev/docs/appstate.html#addeventlistener\n   */\n  addEventListener(type: string, handler: Function) {\n    invariant(\n      this._supportedEvents.indexOf(type) !== -1,\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n\n    switch (type) {\n      case 'change': {\n        this._eventHandlers[type].set(\n          handler,\n          this.addListener('appStateDidChange', appStateData => {\n            handler(appStateData.app_state);\n          }),\n        );\n        break;\n      }\n      case 'memoryWarning': {\n        this._eventHandlers[type].set(\n          handler,\n          this.addListener('memoryWarning', handler),\n        );\n        break;\n      }\n\n      case 'blur':\n      case 'focus': {\n        this._eventHandlers[type].set(\n          handler,\n          this.addListener('appStateFocusChange', hasFocus => {\n            if (type === 'blur' && !hasFocus) {\n              handler();\n            }\n            if (type === 'focus' && hasFocus) {\n              handler();\n            }\n          }),\n        );\n      }\n    }\n  }\n\n  /**\n   * Remove a handler by passing the `change` event type and the handler.\n   *\n   * See https://reactnative.dev/docs/appstate.html#removeeventlistener\n   */\n  removeEventListener(type: string, handler: Function) {\n    invariant(\n      this._supportedEvents.indexOf(type) !== -1,\n      'Trying to remove listener for unknown event: \"%s\"',\n      type,\n    );\n    if (!this._eventHandlers[type].has(handler)) {\n      return;\n    }\n    this._eventHandlers[type].get(handler).remove();\n    this._eventHandlers[type].delete(handler);\n  }\n}\n\nfunction throwMissingNativeModule() {\n  invariant(\n    false,\n    'Cannot use AppState module when native RCTAppState is not included in the build.\\n' +\n      'Either include it, or check AppState.isAvailable before calling any methods.',\n  );\n}\n\nclass MissingNativeAppStateShim extends EventEmitter {\n  // AppState\n  isAvailable: boolean = false;\n  currentState: ?string = null;\n\n  addEventListener(type: string, handler: Function) {\n    throwMissingNativeModule();\n  }\n\n  removeEventListener(type: string, handler: Function) {\n    throwMissingNativeModule();\n  }\n\n  // EventEmitter\n  addListener() {\n    throwMissingNativeModule();\n  }\n\n  removeAllListeners() {\n    throwMissingNativeModule();\n  }\n\n  removeSubscription() {\n    throwMissingNativeModule();\n  }\n}\n\n// This module depends on the native `RCTAppState` module. If you don't include it,\n// `AppState.isAvailable` will return `false`, and any method calls will throw.\n// We reassign the class variable to keep the autodoc generator happy.\nconst AppStateInstance: AppState | MissingNativeAppStateShim = NativeAppState\n  ? new AppState()\n  : new MissingNativeAppStateShim();\n\nmodule.exports = AppStateInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
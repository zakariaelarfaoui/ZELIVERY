{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar invariant = require('invariant');\n\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  _createClass(EventSubscriptionVendor, [{\n    key: \"addSubscription\",\n    value: function addSubscription(eventType, subscription) {\n      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n\n      if (!this._subscriptionsForType[eventType]) {\n        this._subscriptionsForType[eventType] = [];\n      }\n\n      var key = this._subscriptionsForType[eventType].length;\n\n      this._subscriptionsForType[eventType].push(subscription);\n\n      subscription.eventType = eventType;\n      subscription.key = key;\n      return subscription;\n    }\n  }, {\n    key: \"removeAllSubscriptions\",\n    value: function removeAllSubscriptions(eventType) {\n      if (eventType === undefined) {\n        this._subscriptionsForType = {};\n      } else {\n        delete this._subscriptionsForType[eventType];\n      }\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      var eventType = subscription.eventType;\n      var key = subscription.key;\n      var subscriptionsForType = this._subscriptionsForType[eventType];\n\n      if (subscriptionsForType) {\n        delete subscriptionsForType[key];\n      }\n    }\n  }, {\n    key: \"getSubscriptionsForType\",\n    value: function getSubscriptionsForType(eventType) {\n      return this._subscriptionsForType[eventType];\n    }\n  }]);\n\n  return EventSubscriptionVendor;\n}();\n\nmodule.exports = EventSubscriptionVendor;","map":{"version":3,"names":["invariant","require","EventSubscriptionVendor","_subscriptionsForType","_currentSubscription","eventType","subscription","subscriber","key","length","push","undefined","subscriptionsForType","module","exports"],"sources":["D:/Youcode/Projet/Full Stcuk JavaScript/ZELIVERY/node_modules/react-native/Libraries/vendor/emitter/_EventSubscriptionVendor.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\nimport type EventSubscription from './_EventSubscription';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor {\n  _subscriptionsForType: Object;\n  _currentSubscription: ?EventSubscription;\n\n  constructor() {\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n  addSubscription(\n    eventType: string,\n    subscription: EventSubscription,\n  ): EventSubscription {\n    invariant(\n      subscription.subscriber === this,\n      'The subscriber of the subscription is incorrectly set.',\n    );\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    const key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n  removeAllSubscriptions(eventType: ?string) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  removeSubscription(subscription: Object) {\n    const eventType = subscription.eventType;\n    const key = subscription.key;\n\n    const subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  getSubscriptionsForType(eventType: string): ?[EventSubscription] {\n    return this._subscriptionsForType[eventType];\n  }\n}\n\nmodule.exports = EventSubscriptionVendor;\n"],"mappings":"AAUA;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;IAQMC,uB;EAIJ,mCAAc;IAAA;;IACZ,KAAKC,qBAAL,GAA6B,EAA7B;IACA,KAAKC,oBAAL,GAA4B,IAA5B;EACD;;;;WAQD,yBACEC,SADF,EAEEC,YAFF,EAGqB;MACnBN,SAAS,CACPM,YAAY,CAACC,UAAb,KAA4B,IADrB,EAEP,wDAFO,CAAT;;MAIA,IAAI,CAAC,KAAKJ,qBAAL,CAA2BE,SAA3B,CAAL,EAA4C;QAC1C,KAAKF,qBAAL,CAA2BE,SAA3B,IAAwC,EAAxC;MACD;;MACD,IAAMG,GAAG,GAAG,KAAKL,qBAAL,CAA2BE,SAA3B,EAAsCI,MAAlD;;MACA,KAAKN,qBAAL,CAA2BE,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C;;MACAA,YAAY,CAACD,SAAb,GAAyBA,SAAzB;MACAC,YAAY,CAACE,GAAb,GAAmBA,GAAnB;MACA,OAAOF,YAAP;IACD;;;WAQD,gCAAuBD,SAAvB,EAA2C;MACzC,IAAIA,SAAS,KAAKM,SAAlB,EAA6B;QAC3B,KAAKR,qBAAL,GAA6B,EAA7B;MACD,CAFD,MAEO;QACL,OAAO,KAAKA,qBAAL,CAA2BE,SAA3B,CAAP;MACD;IACF;;;WAQD,4BAAmBC,YAAnB,EAAyC;MACvC,IAAMD,SAAS,GAAGC,YAAY,CAACD,SAA/B;MACA,IAAMG,GAAG,GAAGF,YAAY,CAACE,GAAzB;MAEA,IAAMI,oBAAoB,GAAG,KAAKT,qBAAL,CAA2BE,SAA3B,CAA7B;;MACA,IAAIO,oBAAJ,EAA0B;QACxB,OAAOA,oBAAoB,CAACJ,GAAD,CAA3B;MACD;IACF;;;WAcD,iCAAwBH,SAAxB,EAAiE;MAC/D,OAAO,KAAKF,qBAAL,CAA2BE,SAA3B,CAAP;IACD;;;;;;AAGHQ,MAAM,CAACC,OAAP,GAAiBZ,uBAAjB"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { handleException, SyntheticError } from \"./ExceptionsManager\";\n\nfunction showErrorDialog(capturedError) {\n  var componentStack = capturedError.componentStack,\n      error = capturedError.error;\n  var errorToHandle;\n\n  if (error instanceof Error) {\n    errorToHandle = error;\n  } else if (typeof error === 'string') {\n    errorToHandle = new SyntheticError(error);\n  } else {\n    errorToHandle = new SyntheticError('Unspecified error');\n  }\n\n  try {\n    errorToHandle.componentStack = componentStack;\n    errorToHandle.isComponentError = true;\n  } catch (e) {}\n\n  handleException(errorToHandle, false);\n  return false;\n}\n\nmodule.exports = {\n  showErrorDialog: showErrorDialog\n};","map":{"version":3,"names":["handleException","SyntheticError","showErrorDialog","capturedError","componentStack","error","errorToHandle","Error","isComponentError","e","module","exports"],"sources":["D:/Youcode/Projet/Full Stcuk JavaScript/ZELIVERY/node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport type CapturedError = {\n  +componentStack: string,\n  +error: mixed,\n  +errorBoundary: ?{...},\n  ...\n};\n\nimport type {ExtendedError} from './Devtools/parseErrorStack';\n\nimport {handleException, SyntheticError} from './ExceptionsManager';\n\n/**\n * Intercept lifecycle errors and ensure they are shown with the correct stack\n * trace within the native redbox component.\n */\nfunction showErrorDialog(capturedError: CapturedError): boolean {\n  const {componentStack, error} = capturedError;\n\n  let errorToHandle;\n\n  // Typically Errors are thrown but eg strings or null can be thrown as well.\n  if (error instanceof Error) {\n    errorToHandle = (error: ExtendedError);\n  } else if (typeof error === 'string') {\n    errorToHandle = (new SyntheticError(error): ExtendedError);\n  } else {\n    errorToHandle = (new SyntheticError('Unspecified error'): ExtendedError);\n  }\n  try {\n    errorToHandle.componentStack = componentStack;\n    errorToHandle.isComponentError = true;\n  } catch (e) {}\n  handleException(errorToHandle, false);\n\n  // Return false here to prevent ReactFiberErrorLogger default behavior of\n  // logging error details to console.error. Calls to console.error are\n  // automatically routed to the native redbox controller, which we've already\n  // done above by calling ExceptionsManager.\n  return false;\n}\n\nmodule.exports = {showErrorDialog};\n"],"mappings":"AAmBA,SAAQA,eAAR,EAAyBC,cAAzB;;AAMA,SAASC,eAAT,CAAyBC,aAAzB,EAAgE;EAC9D,IAAOC,cAAP,GAAgCD,aAAhC,CAAOC,cAAP;EAAA,IAAuBC,KAAvB,GAAgCF,aAAhC,CAAuBE,KAAvB;EAEA,IAAIC,aAAJ;;EAGA,IAAID,KAAK,YAAYE,KAArB,EAA4B;IAC1BD,aAAa,GAAID,KAAjB;EACD,CAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IACpCC,aAAa,GAAI,IAAIL,cAAJ,CAAmBI,KAAnB,CAAjB;EACD,CAFM,MAEA;IACLC,aAAa,GAAI,IAAIL,cAAJ,CAAmB,mBAAnB,CAAjB;EACD;;EACD,IAAI;IACFK,aAAa,CAACF,cAAd,GAA+BA,cAA/B;IACAE,aAAa,CAACE,gBAAd,GAAiC,IAAjC;EACD,CAHD,CAGE,OAAOC,CAAP,EAAU,CAAE;;EACdT,eAAe,CAACM,aAAD,EAAgB,KAAhB,CAAf;EAMA,OAAO,KAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB;EAACT,eAAe,EAAfA;AAAD,CAAjB"},"metadata":{},"sourceType":"module"}